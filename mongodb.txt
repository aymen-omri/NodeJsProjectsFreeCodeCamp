require('dotenv').config();
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
var personSchema = new Schema({
  name: { type: String, required: true },
  age: Number,
  favoriteFoods: [String]
});
let Person = mongoose.model("Person", personSchema);


const mySecret = process.env['MONGO_URI'];
mongoose.connect(mySecret, { useNewUrlParser: true, useUnifiedTopology: true });


const createAndSavePerson = (done) => {
let aymen = new Person({name:"aymen" , age : 45 ,favoriteFoods:["eggs" , "milk"] }) ; 
  aymen.save((err , data)=>{
    if(err)throw console.log(err) ; 
    done(null, data);
  })
  
};

var arrayOfPeople = [
  {name: "Frankie", age: 74, favoriteFoods: ["Del Taco"]},
  {name: "Sol", age: 76, favoriteFoods: ["roast chicken"]},
  {name: "Robert", age: 78, favoriteFoods: ["wine"]}
]; 

var createManyPeople = function(arrayOfPeople, done) {
  Person.create(arrayOfPeople, function (err, people) {
    if (err) return console.log(err);
    done(null, people);
  });
};


const findPeopleByName = (personName, done) => {
  Person.find({name : personName} , (err , data)=>{
    if (err) throw console.log(err) ; 
    done(null,data) ; 
  });
};

const findOneByFood = (food, done) => {
  Person.findOne({favoriteFoods:food} , (err , data)=>{
    if (err) throw console.log(err) ; 
    done(null , data) ; 
   });
};

const findPersonById = (personId, done) => {
  Person.findById({_id : personId} , (err,data)=>{
    if(err) throw console.log(err) ; 
     done(null,data) ; 
  }) ; 
};

const findEditThenSave = (personId, done) => {
  const foodToAdd = "hamburger";
  Person.findById({_id:personId},(err,person)=>{
    if(err) throw err ; 
    person.favoriteFoods.push(foodToAdd);
    person.save((err , updated)=>{
      if(err) throw err;
      done(null , updated);
    });
  });
};

const findAndUpdate = (personName, done) => {
  const ageToSet = 20;
  Person.findOneAndUpdate({name : personName}, 
  {age:ageToSet} , {new:true} , (err , person)=>{
    if (err) throw err ; 
    done(null , person) ; 
  }) ; 
};

const removeById = (personId, done) => {
  Person.findByIdAndRemove({_id:personId} , {new:true} , (err,  person)=>{
    if (err) throw err ; 
    done(null , person) ; 
  });
};

const removeManyPeople = (done) => {
  const nameToRemove = "Mary";
  /*Person.deleteMany({name: nameToRemove}, (err, response) => {
    if(err) return console.log(err);
    done(null, response);
  });*/
};

const queryChain = (done) => {
  const foodToSearch = "burrito";
  Person
    .find({ favouriteFoods: foodToSearch })
    .sort({name:1})
    .limit(2)
    .select({age:-age})
    .exec(
      function (err , data){
    if(err) return err;
    done(null , data) ; 
      }) ; 

};

/** **Well Done !!**
/* You completed these challenges, let's go celebrate !
 */

//----- **DO NOT EDIT BELOW THIS LINE** ----------------------------------

exports.PersonModel = Person;
exports.createAndSavePerson = createAndSavePerson;
exports.findPeopleByName = findPeopleByName;
exports.findOneByFood = findOneByFood;
exports.findPersonById = findPersonById;
exports.findEditThenSave = findEditThenSave;
exports.findAndUpdate = findAndUpdate;
exports.createManyPeople = createManyPeople;
exports.removeById = removeById;
exports.removeManyPeople = removeManyPeople;
exports.queryChain = queryChain;
